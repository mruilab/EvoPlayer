# Sets the minimum version of CMake required to build the native library.

cmake_minimum_required(VERSION 3.4.1)

# Declares and names the project.

project("evoplayer")

# 支持C++11标准和GNU扩展特性
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")

set(jnilibs ${CMAKE_SOURCE_DIR}/../jnilibs)
set(libname evo-lib)

include_directories(
        include
        glm
        ${CMAKE_SOURCE_DIR}/common
        ${CMAKE_SOURCE_DIR}/decoder
        ${CMAKE_SOURCE_DIR}/decoder/audio
        ${CMAKE_SOURCE_DIR}/decoder/video
        ${CMAKE_SOURCE_DIR}/frame
        ${CMAKE_SOURCE_DIR}/jni
        ${CMAKE_SOURCE_DIR}/opengl/drawer
        ${CMAKE_SOURCE_DIR}/opengl/drawer/proxy
        ${CMAKE_SOURCE_DIR}/opengl/egl
        ${CMAKE_SOURCE_DIR}/player
        ${CMAKE_SOURCE_DIR}/player/def_player
        ${CMAKE_SOURCE_DIR}/player/gl_player
        ${CMAKE_SOURCE_DIR}/render/audio
        ${CMAKE_SOURCE_DIR}/render/video
        ${CMAKE_SOURCE_DIR}/render/video/native_render
        ${CMAKE_SOURCE_DIR}/render/video/opengl_render
        ${CMAKE_SOURCE_DIR}/shader
        ${CMAKE_SOURCE_DIR}/shader/fragment
        ${CMAKE_SOURCE_DIR}/shader/vertex
        ${CMAKE_SOURCE_DIR}/utils
)

link_directories(
        ${jnilibs}/${ANDROID_ABI}
)

file(GLOB src-files
        ${CMAKE_SOURCE_DIR}/*.cpp
        ${CMAKE_SOURCE_DIR}/common/*.h
        ${CMAKE_SOURCE_DIR}/decoder/*.cpp
        ${CMAKE_SOURCE_DIR}/decoder/audio/*.cpp
        ${CMAKE_SOURCE_DIR}/decoder/video/*.cpp
        ${CMAKE_SOURCE_DIR}/frame/*.h
        ${CMAKE_SOURCE_DIR}/jni/*.cpp
        ${CMAKE_SOURCE_DIR}/opengl/drawer/*.cpp
        ${CMAKE_SOURCE_DIR}/opengl/drawer/proxy/*.cpp
        ${CMAKE_SOURCE_DIR}/opengl/egl/*.cpp
        ${CMAKE_SOURCE_DIR}/player/*.cpp
        ${CMAKE_SOURCE_DIR}/player/def_player/*.cpp
        ${CMAKE_SOURCE_DIR}/player/gl_player/*.cpp
        ${CMAKE_SOURCE_DIR}/render/audio/*.cpp
        ${CMAKE_SOURCE_DIR}/render/video/*.h
        ${CMAKE_SOURCE_DIR}/render/video/native_render/*.cpp
        ${CMAKE_SOURCE_DIR}/render/video/opengl_render/*.cpp
        ${CMAKE_SOURCE_DIR}/shader/*.h
        ${CMAKE_SOURCE_DIR}/shader/fragment/*.cpp
        ${CMAKE_SOURCE_DIR}/shader/vertex/*.cpp
        ${CMAKE_SOURCE_DIR}/utils/*.h)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.

add_library( # Sets the name of the library.
        ${libname}

        # Sets the library as a shared library.
        SHARED

        # Provides a relative path to your source file(s).
        ${src-files})

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
        log-lib

        # Specifies the name of the NDK library that
        # you want CMake to locate.
        log)

set(third-party-libs
        ffmpeg
        )

set(native-libs
        android
        EGL
        GLESv3
        OpenSLES
        log
        m
        z
        )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( # Specifies the target library.
        ${libname}

        # Links the target library to the log library
        # included in the NDK.
        ${log-lib}
        ${third-party-libs}
        ${native-libs}
        )